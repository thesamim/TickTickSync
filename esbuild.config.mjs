import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

import { copy } from 'esbuild-plugin-copy';

import fs from 'fs';

const copyManifestPlugin = () => ({
	name: 'copy-manifest-plugin',
	setup(build) {
		build.onEnd(async () => {
			try {
				fs.copyFileSync('./manifest.json', './dist/manifest.json');
				fs.copyFileSync('./styles.css', './dist/styles.css');
			} catch (e) {
				console.error('Failed to copy file:', e);
			}
		});
	},
});

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
		format: "cjs",
		target: "es2022",
		logLevel: "info",
		sourcemap: prod ? false : "inline",
		treeShaking: true,
		outdir: './dist',
		plugins: [
			copy({
				resolveFrom: 'cwd',	// Returns name of current working directory
				assets: {
					from: ['./src/static/**/*'],
					to: ['./dist'],
				},
			}), 
			copyManifestPlugin(),
		],
	});
	
	if (prod) {
		await context.rebuild();
		process.exit(0);
	} else {
		await context.watch();
	}
